name: Build Backend
description: 'Builds the backend project and uploads the build artifacts'
inputs:

  # Backend
  project-root:
    description: 'Root directory of the project'
    required: true
    type: string
  project-folder:
    description: 'Folder containing the backend project'
    required: true
    type: string
  project-file:
    description: 'Backend project file (e.g., .csproj, package.json)'
    required: true
    type: string

  # Docker
  version:
    description: 'Docker Image and Software Version'
    required: true
    type: string
  image-name:
    description: 'Name of the Docker image to build'
    required: true
    type: string
  registry-name:
    description: 'Azure Container Registry login server (e.g., myregistry.azurecr.io)'
    required: true
    type: string
  dockerfile:
    description: 'Path to the Dockerfile relative to the project root'
    required: false
    default: 'Dockerfile'
    type: string
  push:
    description: 'Whether to push the Docker image to the registry'
    required: false
    default: true
    type: boolean

  # Versioning
  version-script:
    description: 'Path to version script downloaded from shared repository'
    required: false
    default: './scripts/ci_version.sh'
    type: string
  scripts-version:
    description: 'Version/tag of scripts to use from shared repository'
    required: false
    default: 'main'
    type: string

  # ACR
  acr-username:
    description: 'Username for Azure Container Registry'
    required: false
  acr-password:
    description: 'Password for Azure Container Registry'
    required: false

runs:
  using: 'composite'
  steps:

  - name: Build Backend Action Started
    shell: bash
    run: |
      echo "üöÄ Starting Build Backend Action"
      echo "All inputs received:"
      echo "  - project-root: ${{ inputs.project-root }}"
      echo "  - project-folder: ${{ inputs.project-folder }}"
      echo "  - version: ${{ inputs.version }}"
      echo "  - push: ${{ inputs.push }}"
      echo "  - registry-name: ${{ inputs.registry-name }}"
      echo "  - image-name: ${{ inputs.image-name }}"

  - name: Debug ACR Login Info
    shell: bash
    run: |
      echo "üîê Preparing to log in to Azure Container Registry..."
      echo "Registry: ${{ inputs.registry-name }}"
      echo "Push enabled: ${{ inputs.push }}"
      echo "Push type: $(echo '${{ inputs.push }}' | wc -c) chars"
      echo "Push raw value: '${{ inputs.push }}'"
      echo "Username provided: $([ -n '${{ inputs.acr-username }}' ] && echo 'Yes' || echo 'No')"
      echo "Password provided: $([ -n '${{ inputs.acr-password }}' ] && echo 'Yes' || echo 'No')"
      echo "Condition check: inputs.push == true evaluates to: $([ '${{ inputs.push }}' = 'true' ] && echo 'TRUE' || echo 'FALSE')"
      echo "Testing different conditions:"
      echo "  - inputs.push (as boolean): $([ '${{ inputs.push }}' = 'true' ] && echo 'TRUE' || echo 'FALSE')"
      echo "  - inputs.push == 'true' (as string): $([ '${{ inputs.push }}' = 'true' ] && echo 'TRUE' || echo 'FALSE')"

  - name: Log in to Azure Container Registry
    if: inputs.push
    uses: docker/login-action@v3
    with:
      registry: ${{ inputs.registry-name }}
      username: ${{ inputs.acr-username }}
      password: ${{ inputs.acr-password }}

  - name: Verify ACR Login
    if: inputs.push
    shell: bash
    run: |
      echo "‚úÖ Successfully logged in to ${{ inputs.registry-name }}"
      echo "üîç Checking Docker auth configuration..."
      if docker info > /dev/null 2>&1; then
        echo "‚úÖ Docker daemon is accessible"
      else
        echo "‚ùå Docker daemon is not accessible"
      fi

  - name: Extract metadata for Docker
    id: meta
    uses: docker/metadata-action@v5
    with:
      images: ${{ inputs.registry-name }}/${{ inputs.image-name }}
      tags: |
        type=ref,event=branch,prefix=api-
        type=ref,event=pr,prefix=api-pr-
        type=raw,value=api-${{ inputs.version }}
        type=raw,value=${{ inputs.version }}
        type=raw,value=latest,enable={{is_default_branch}}

  - name: Build Docker image (and push if required)
    uses: docker/build-push-action@v5
    with:
      context: ./${{ inputs.project-root }}
      file: ./${{ inputs.project-root }}/${{ inputs.dockerfile }}
      push: ${{ inputs.push }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      build-args: |
        CONTAINER_IMAGE_VERSION=${{ inputs.version }}

