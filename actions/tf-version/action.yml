name: 'TfVars'
description: 'Updates tfvars files with specified version'

inputs:
  version:
    description: 'The version to sync to'
    required: true
  tfvars-files:
    description: 'Space-separated list of full paths to tfvars files to update'
    required: true
  scripts-version:
    description: 'The version of the scripts to use'
    required: false
    default: 'main'

outputs:
  files-updated:
    description: 'Number of tfvars files that were updated'
    value: ${{ steps.update.outputs.files-updated }}
  updated-files:
    description: 'Space-separated list of file paths that were actually updated'
    value: ${{ steps.update.outputs.updated-files }}

runs:
  using: 'composite'
  steps:

  - name: TfVars Action Started
    shell: bash
    run: |
      echo "🚀 Starting TfVars Action"
      echo "All inputs received:"
      echo "  - version: ${{ inputs.version }}"
      echo "  - scripts-version: ${{ inputs.scripts-version }}"
      echo "  - tfvars-files: ${{ inputs.tfvars-files }}"
      
      # Validate inputs
      TFVARS_FILES="${{ inputs.tfvars-files }}"
      
      if [ -z "$TFVARS_FILES" ]; then
        echo "❌ Error: 'tfvars-files' must be provided and cannot be empty"
        exit 1
      fi
      
      echo "🔍 Files to process:"
      for file in $TFVARS_FILES; do
        echo "  - $file"
      done

  - name: Download required scripts
    uses: Mcafee123/affolterNET.Github.SharedWorkflows/actions/get-scripts@main
    with:
      scripts: "scripts/ci_tf.sh scripts/ci_utils.sh"
      scripts-version: ${{ inputs.scripts-version }}

  - name: Update tfvars files
    id: update
    shell: bash
    run: |
      VERSION="${{ inputs.version }}"
      TFVARS_FILES="${{ inputs.tfvars-files }}"
      
      echo "🔄 Processing tfvars files..."
      
      UPDATED_COUNT=0
      UPDATED_FILES=""
      
      # Count files for reporting
      TOTAL_COUNT=0
      for file in $TFVARS_FILES; do
        TOTAL_COUNT=$((TOTAL_COUNT + 1))
      done
      
      echo "📊 Found $TOTAL_COUNT tfvars files to process"
      
      # Process each tfvars file
      rm -f /tmp/updated_files.txt
      
      for TFVARS_FILE in $TFVARS_FILES; do
        
        echo ""
        echo "📄 Processing tfvars file: $TFVARS_FILE"
        
        # Check if tfvars file exists
        if [ ! -f "$TFVARS_FILE" ]; then
          echo "⚠️ Tfvars file not found: $TFVARS_FILE - skipping"
          continue
        fi
        
        # Check if tfvars already has the correct version to avoid unnecessary commits
        if grep -q ":$VERSION\"" "$TFVARS_FILE"; then
          echo "✅ File already has correct version: $VERSION"
        else
          echo "🔄 Updating tfvars file to version: $VERSION"
          
          # Update this tfvars file
          if ./scripts/ci_tf.sh sync-tfvars "$VERSION" "$TFVARS_FILE"; then
            echo "✅ Successfully updated $TFVARS_FILE"
            
            # Track this update
            echo "$TFVARS_FILE" >> /tmp/updated_files.txt
          else
            echo "❌ Failed to update $TFVARS_FILE"
          fi
        fi
      done
      
      # Count and report results
      if [ -f /tmp/updated_files.txt ]; then
        UPDATED_COUNT=$(wc -l < /tmp/updated_files.txt)
        
        # Build space-separated list of updated files
        UPDATED_FILES=""
        while read -r file_path; do
          if [ -z "$UPDATED_FILES" ]; then
            UPDATED_FILES="$file_path"
          else
            UPDATED_FILES="$UPDATED_FILES $file_path"
          fi
        done < /tmp/updated_files.txt
        
        rm -f /tmp/updated_files.txt
      else
        UPDATED_COUNT=0
        UPDATED_FILES=""
      fi
      
      echo ""
      echo "📋 Summary:"
      echo "  - Total tfvars files: $TOTAL_COUNT"
      echo "  - Updated files: $UPDATED_COUNT"
      echo "  - Updated list: $UPDATED_FILES"
      
      # Set outputs
      echo "files-updated=$UPDATED_COUNT" >> $GITHUB_OUTPUT
      echo "updated-files=$UPDATED_FILES" >> $GITHUB_OUTPUT

  - name: TfVars update complete
    shell: bash
    run: |
      echo "🎉 TfVars update completed"
      echo "📊 Final results:"
      echo "  - Files updated: ${{ steps.update.outputs.files-updated }}"
      echo "  - Updated files: ${{ steps.update.outputs.updated-files }}"
