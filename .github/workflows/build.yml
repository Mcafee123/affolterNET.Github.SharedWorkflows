name: Build

on:
  workflow_call:
    inputs:

      # Configuration
      config-file:
        description: "Path to configuration JSON file"
        required: true
        type: string

      # Build options
      stage:
        description: "Build stage: develop, pr, merge"
        required: true
        type: string

      # Override options (optional)
      push:
        description: "Push Docker image"
        required: false
        type: boolean
      update-version:
        description: "Update version"
        required: false
        type: boolean

    secrets:

      # ACR
      acr-username:
        description: 'Azure Container Registry username'
        required: false
      acr-password:
        description: 'Azure Container Registry password'
        required: false

    outputs:
      version:
        description: 'The version read from or written to the backend project file'
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: 'build: ${{ inputs.stage }}'
    outputs:
      version: ${{ steps.version.outputs.version }}  # Job captures step output
    steps:

      - name: Checkout code
        uses: Mcafee123/affolterNET.Github.SharedWorkflows/actions/checkout@main
        with:
          fetch-depth: 0

      # Load configuration at the start of the job
      - name: Load configuration
        id: config
        uses: Mcafee123/affolterNET.Github.SharedWorkflows/actions/load-config@main
        with:
          config-file: ${{ inputs.config-file }}

      # Skip if PR is running to main
      - name: Check if should skip
        if: steps.config.outputs.pr-running-to-main == 'true'
        run: |
          echo "⚠️ Skipping build - PR is running to main"

      - name: Build Workflow Started
        if: steps.config.outputs.pr-running-to-main != 'true'
        shell: bash
        run: |
          echo "🚀 Starting Build Workflow"
          echo "All inputs received:"
          echo "  Frontend inputs:"
          echo "    - build-frontend: ${{ steps.config.outputs.build-frontend }}"
          echo "    - frontend-root: ${{ steps.config.outputs.frontend-root }}"
          echo "    - frontend-build-command: ${{ steps.config.outputs.frontend-build-command }}"
          echo "    - node-version: ${{ steps.config.outputs.node-version }}"
          echo "  Backend inputs:"
          echo "    - backend-root: ${{ steps.config.outputs.backend-root }}"
          echo "    - backend-folder: ${{ steps.config.outputs.backend-folder }}"
          echo "    - backend-project-file: ${{ steps.config.outputs.backend-project-file }}"
          echo "  Docker inputs:"
          echo "    - image-name: ${{ steps.config.outputs.image-name }}"
          echo "    - registry-name: ${{ steps.config.outputs.registry-name }}"
          echo "    - dockerfile: ${{ steps.config.outputs.dockerfile }}"
          echo "    - push: ${{ inputs.push }}"
          echo "  Versioning inputs:"
          echo "    - update-version: ${{ inputs.update-version }}"
          echo "    - version-script: ${{ steps.config.outputs.version-script }}"
          echo "    - scripts-version: ${{ steps.config.outputs.scripts-version }}"
          echo "  Terraform inputs:"
          echo "    - tf-module-path: ${{ steps.config.outputs.tf-module-path }}"
          echo "    - tfvars-file: ${{ steps.config.outputs.tfvars-file }}"
          echo "  Secrets provided:"
          echo "    - acr-username: $([ -n '${{ secrets.acr-username }}' ] && echo 'Yes' || echo 'No')"
          echo "    - acr-password: $([ -n '${{ secrets.acr-password }}' ] && echo 'Yes' || echo 'No')"

      - name: Get version scripts
        if: steps.config.outputs.pr-running-to-main != 'true'
        uses: Mcafee123/affolterNET.Github.SharedWorkflows/actions/get-scripts@main
        with:
          scripts-version: ${{ steps.config.outputs.scripts-version }}
          github-token: ${{ github.token }}

      - name: Get version from project file
        if: steps.config.outputs.pr-running-to-main != 'true'
        id: version
        shell: bash
        run: |
          if [ ${{ inputs.update-version }} == true ]; then
            echo "Updating version in project file..."
            echo "Running: ./${{ steps.config.outputs.version-script }} update ${{ steps.config.outputs.backend-root }}/${{ steps.config.outputs.backend-folder }}/${{ steps.config.outputs.backend-project-file}} ${{ steps.config.outputs.tf-module-path }}/${{ steps.config.outputs.tfvars-file }}"
            ./${{ steps.config.outputs.version-script }} update ${{ steps.config.outputs.backend-root }}/${{ steps.config.outputs.backend-folder }}/${{ steps.config.outputs.backend-project-file}} ${{ steps.config.outputs.tf-module-path }}/${{ steps.config.outputs.tfvars-file }} >> $GITHUB_OUTPUT
          else
            echo "Reading version from project file..."
            echo "Running: ./${{ steps.config.outputs.version-script }} read ${{ steps.config.outputs.backend-root }}/${{ steps.config.outputs.backend-folder }}/${{ steps.config.outputs.backend-project-file}}"
            ./${{ steps.config.outputs.version-script }} read ${{ steps.config.outputs.backend-root }}/${{ steps.config.outputs.backend-folder }}/${{ steps.config.outputs.backend-project-file}} >> $GITHUB_OUTPUT
          fi

      - name: Build Frontend
        if: ${{ steps.config.outputs.pr-running-to-main != 'true' && steps.config.outputs.build-frontend == 'true' }}
        uses: Mcafee123/affolterNET.Github.SharedWorkflows/actions/build-frontend@main
        with:
          frontend-root: ${{ steps.config.outputs.frontend-root }}
          build-command: ${{ steps.config.outputs.frontend-build-command }}
          node-version: ${{ steps.config.outputs.node-version }}

      - name: Build Backend
        if: steps.config.outputs.pr-running-to-main != 'true'
        uses: Mcafee123/affolterNET.Github.SharedWorkflows/actions/build-backend@main
        with:
          version: ${{ steps.version.outputs.version }}
          project-root: ${{ steps.config.outputs.backend-root }}
          project-folder: ${{ steps.config.outputs.backend-folder }}
          project-file: ${{ steps.config.outputs.backend-project-file }}
          dockerfile: ${{ steps.config.outputs.dockerfile }}
          image-name: ${{ steps.config.outputs.image-name }}
          registry-name: ${{ steps.config.outputs.registry-name }}
          push: ${{ inputs.push }}
          version-script: ${{ steps.config.outputs.version-script }}
          scripts-version: ${{ steps.config.outputs.scripts-version }}
          acr-username: ${{ secrets.acr-username }}
          acr-password: ${{ secrets.acr-password }}
